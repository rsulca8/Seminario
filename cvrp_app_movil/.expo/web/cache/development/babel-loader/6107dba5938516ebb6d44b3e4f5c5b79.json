{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/rodrigo/Documentos/Git/Seminario/scr/cvrp_app_movil/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'react-native-gesture-handler';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SignInScreen from \"./src/SignInScreen\";\nimport UserProfile from \"./src/UserProfile\";\nimport Loading from \"./src/SplashScreen\";\nimport { AsyncStorage } from '@react-native-async-storage/async-storage';\nvar Stack = createStackNavigator();\n\nfunction CVRP() {\n  var estadoInicial = {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  };\n\n  var reducer = function reducer(prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  };\n\n  var _React$useReducer = React.useReducer(reducer, estadoInicial),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 3:\n              userToken = _context3.sent;\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(\"Algo anduvo mal :(\");\n\n            case 9:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  if (this.state.isLoading) {\n    return React.createElement(SplashScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, state.userToken == null ? React.createElement(Stack.Screen, {\n    name: \"SignIn\",\n    component: SignInScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }) : React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default CVRP;","map":{"version":3,"sources":["/home/rodrigo/Documentos/Git/Seminario/scr/cvrp_app_movil/App.js"],"names":["React","Component","NavigationContainer","createStackNavigator","SignInScreen","UserProfile","Loading","AsyncStorage","Stack","CVRP","estadoInicial","isLoading","isSignout","userToken","reducer","prevState","action","type","token","useReducer","state","dispatch","authContext","useMemo","signIn","data","signOut","signUp","useEffect","bootstrapAsync","getItem","console","log","HomeScreen"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport React, {Component} from 'react'\nimport {View, Text, StyleSheet, Image, Button, Alert, ImageBackground, \n  TouchableOpacity, TextInput, ScrollView } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SignInScreen from './src/SignInScreen'\nimport UserProfile from './src/UserProfile'\nimport Loading from './src/SplashScreen'\nimport {AsyncStorage} from '@react-native-async-storage/async-storage'\n\n\n\nvar Stack = createStackNavigator();\nfunction CVRP(){\n  \n  const estadoInicial = {\n    isLoading: true,\n    isSignout: false,\n    userToken: null,\n  }\n\n  const reducer = (prevState, action) => {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return {\n          ...prevState,\n          userToken: action.token,\n          isLoading: false,\n        };\n      case 'SIGN_IN':\n        return {\n          ...prevState,\n          isSignout: false,\n          userToken: action.token,\n        };\n      case 'SIGN_OUT':\n        return {\n          ...prevState,\n          isSignout: true,\n          userToken: null,\n        };\n    }\n\n  }\n\n  const [state, dispatch] = React.useReducer(reducer, estadoInicial)\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async data => {\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async data => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `AsyncStorage`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    //Define un método ásincrono para el loading\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        userToken = await AsyncStorage.getItem('userToken');\n      } catch (e) {\n        // Restoring token failed\n        console.log(\"Algo anduvo mal :(\")\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n\n  \n  if (this.state.isLoading) {\n    // We haven't finished checking for the token yet\n    return <SplashScreen />;\n  }\n\n  \n  return (\n    <AuthContext.Provider value={authContext}>\n      <Stack.Navigator>\n        {state.userToken == null ? (\n          <Stack.Screen name=\"SignIn\" component={SignInScreen} />\n        ) : (\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        )}\n      </Stack.Navigator>\n    </AuthContext.Provider>\n  );\n}\n\n  export default CVRP"]},"metadata":{},"sourceType":"module"}