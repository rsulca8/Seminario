{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/rodrigo/Documentos/Git/Seminario/scr/cvrp_app_movil/src/boot/setup.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Expo from \"expo\";\nimport * as Font from 'expo-font';\nimport React, { Component } from \"react\";\nimport { StyleProvider } from \"native-base\";\nimport App from \"../app\";\nimport getTheme from \"../theme/components\";\nimport variables from \"../theme/variables/commonColor\";\n\nvar Setup = function (_Component) {\n  _inherits(Setup, _Component);\n\n  var _super = _createSuper(Setup);\n\n  function Setup() {\n    var _this;\n\n    _classCallCheck(this, Setup);\n\n    _this = _super.call(this);\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(Setup, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadFonts();\n    }\n  }, {\n    key: \"loadFonts\",\n    value: function loadFonts() {\n      return _regeneratorRuntime.async(function loadFonts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                Roboto: require(\"../../node_modules/native-base/Fonts/Roboto.ttf\"),\n                Roboto_medium: require(\"../../node_modules/native-base/Fonts/Roboto_medium.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                isReady: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isReady) {\n        return React.createElement(Expo.AppLoading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(StyleProvider, {\n        style: getTheme(variables),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, React.createElement(App, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Setup;\n}(Component);\n\nexport default Setup;","map":{"version":3,"sources":["/home/rodrigo/Documentos/Git/Seminario/scr/cvrp_app_movil/src/boot/setup.js"],"names":["Expo","Font","React","Component","StyleProvider","App","getTheme","variables","Setup","state","isReady","loadFonts","loadAsync","Roboto","require","Roboto_medium","setState"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAOC,GAAP;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;;IAEMC,K;;;;;AACJ,mBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAFY;AAKb;;;;yCACoB;AACnB,WAAKC,SAAL;AACD;;;;;;;;;+CAEOV,IAAI,CAACW,SAAL,CAAe;AACnBC,gBAAAA,MAAM,EAAEC,OAAO,mDADI;AAEnBC,gBAAAA,aAAa,EAAED,OAAO;AAFH,eAAf,C;;;AAIN,mBAAKE,QAAL,CAAc;AAAEN,gBAAAA,OAAO,EAAE;AAAX,eAAd;;;;;;;;;;;6BAEO;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACvB,eAAO,oBAAC,IAAD,CAAM,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aACE,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAEJ,QAAQ,CAACC,SAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EA1BiBJ,S;;AA6BpB,eAAeK,KAAf","sourcesContent":["import * as Expo from \"expo\";\nimport * as Font from 'expo-font';\nimport React, { Component } from \"react\";\nimport { StyleProvider } from \"native-base\";\n\nimport App from \"../app\";\nimport getTheme from \"../theme/components\";\nimport variables from \"../theme/variables/commonColor\";\n\nclass Setup extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isReady: false\n    };\n  }\n  componentWillMount() {\n    this.loadFonts();\n  }\n  async loadFonts() {\n    await Font.loadAsync({\n      Roboto: require(\"../../node_modules/native-base/Fonts/Roboto.ttf\"),\n      Roboto_medium: require(\"../../node_modules/native-base/Fonts/Roboto_medium.ttf\")\n    });\n    this.setState({ isReady: true });\n  }\n  render() {\n    if (!this.state.isReady) {\n      return <Expo.AppLoading />;\n    }\n    return (\n      <StyleProvider style={getTheme(variables)}>\n        <App />\n      </StyleProvider>\n    );\n  }\n}\n\nexport default Setup\n"]},"metadata":{},"sourceType":"module"}